/********** DISPLAY **********/
/*****************************/

/********** FLEX CONTAINER **********/
[class*="flex"] {
  display: flex;
}

[class*="flex-"][class*="-col"] {
  flex-direction: column;
}

[class*="flex-"][class*="-col-rev"] {
  flex-direction: column-reverse;
}

[class*="flex-"][class*="-row"] {
  flex-direction: row;
}

[class*="flex-"][class*="-row-rev"] {
  flex-direction: row-reverse;
}

[class*="flex-"][class*="-wrap"] {
  flex-wrap: wrap;
}

[class*="flex-"][class*="-wrap-rev"] {
  flex-wrap: wrap-reverse;
}

/********** FLEX ITEM **********/
@for $i from 1 through 4 {
  [class*="flex-"][class*="-order#{$i}"] {
    order: #{$i};
  }
}

@for $i from 1 through 4 {
  [class*="flex-"][class*="-grow#{$i}"] {
    flex-grow: #{$i};
  }
}

@for $i from 1 through 4 {
  [class*="flex-"][class*="-shrink#{$i}"] {
    flex-shrink: #{$i};
  }
}


/********** GRID **********/
[class*="grid"] {
  --grid-max-width: 100vw;
  --grid-margin: auto;
}

@mixin grid($column, $key) {
  [class*="grid-"][class*="-#{$column}#{$key}"] {
    grid-template: auto/repeat(#{$column}, auto);
  }
}

[class*="grid"] {
  display: grid;
  max-width: var(--grid-max-width);
  margin: var(--grid-margin);
}

@for $i from 2 to 13 {
  @include grid($i, "tn");
}

@each $key, $value in $breakpoints {
  @media (min-width: $value) {
    @for $i from 2 to 13 {
      @include grid($i, $key);
    }
  }
}

/********** GAP **********/
$gap: (
  "1": 5px,
  "2": 10px,
  "3": 20px,
  "4": 50px
) !default;

[class*="gap-"] {
  @each $key, $value in $gap {
    --gap#{$key}: #{$value};
  }
}

@mixin gap($size, $type) {
  [class*="gap-"][class*="-#{$size}#{$type}"] {
    gap: var(--gap#{$size});
  }
}

@each $key, $value in $gap {
  @include gap($key, "tn");
}

@each $type, $breakpoint in $breakpoints {
  @media (min-width: $breakpoint) {
    @each $key, $value in $gap {
      @include gap($key, $type);
    }
  }
}

/********** PLACE CONTENT **********/
$place-content: (
  "around":   space-around,
  "between":  space-between,
  "evenly":   space-evenly,
  "center":   center,
  "stretch":  stretch,
  "start":    flex-start,
  "end":      flex-end
) !default;

@mixin place-content($key, $type, $value) {
  .content-#{$key}#{$type} {
    place-content: #{$value};
  }
}

@each $key, $value in $place-content {
  @include place-content($key, "", $value);
}

@each $type, $breakpoint in $breakpoints {
  @media (min-width: $breakpoint) {
    @each $key, $value in $place-content {
      @include place-content($key, "-#{$type}", $value);
    }
  }
}

/********** PLACE ITEMS **********/
$place-items: (
  "normal":   normal,
  "base":     baseline,
  "center":   center,
  "stretch":  stretch,
  "start":    flex-start,
  "end":      flex-end
) !default;

@mixin place-items($key, $type, $value) {
  .items-#{$key}#{$type} {
    place-items: #{$value};
  }
}

@each $key, $value in $place-items {
  @include place-items($key, "", $value);
}

@each $type, $breakpoint in $breakpoints {
  @media (min-width: $breakpoint) {
    @each $key, $value in $place-items {
      @include place-items($key, "-#{$type}", $value);
    }
  }
}

/********** PLACE-SELF **********/
$place-self: (
  "auto":     auto,
  "normal":   normal,
  "base":     baseline,
  "center":   center,
  "stretch":  stretch,
  "start":    flex-start,
  "end":      flex-end
) !default;

@mixin place-self($key, $type, $value) {
  .self-#{$key}#{$type} {
    place-self: #{$value};
  }
}

@each $key, $value in $place-self {
  @include place-self($key, "", $value);
}

@each $type, $breakpoint in $breakpoints {
  @media (min-width: $breakpoint) {
    @each $key, $value in $place-self {
      @include place-self($key, "-#{$type}", $value);
    }
  }
}
