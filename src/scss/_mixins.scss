//********** MIXINS **********//
@mixin default($class, $property, $value) {
  .#{$class} {
      #{$property}: #{$value};
  }
}

@mixin global($class, $property, $value) {
  .#{$class},
  .#{$class}-all > * {
      #{$property}: #{$value};
  }
}

@mixin states($class, $property, $value) {
  .#{$class},
  .#{$class}-all > *,
  .#{$class}-on:hover,
  .#{$class}-on:focus,
  *:hover > .#{$class}-in,
  *:focus > .#{$class}-in,
  .#{$class}-one > *:hover,
  .#{$class}-one > *:focus,
  .#{$class}-many:hover > *,
  .#{$class}-many:focus > * {
    #{$property}: #{$value};
  }
}

//********** KEYFRAMES **********//
@mixin keyframes($key) {
  @keyframes #{$key} {
    from {
      transform: var(--ani-#{$key});
    }
  }
}

@each $key, $value in $transforms {
  @include keyframes($key);
}

//********** GRID **********//
@mixin grid($column, $key) {
  [class*="grid-"][class*="-#{$column}#{$key}"] {
    grid-template: auto/repeat(#{$column}, auto);
  }
}

//********** GAP **********//
@mixin gap($size, $type) {
  [class*="gap-"][class*="-#{$type}#{$size}"] {
    gap: var(--ani-gap#{$size});
  }
}

//********** PLACE **********//
@mixin place-content($key, $type, $value) {
  .content-#{$key}#{$type} {
    place-content: #{$value};
  }
}

@mixin place-items($key, $type, $value) {
  .items-#{$key}#{$type} {
    place-items: #{$value};
  }
}

@mixin place-self($key, $type, $value) {
  .self-#{$key}#{$type} {
    place-self: #{$value};
  }
}

//********** CONTAINER **********//
@mixin container($key, $type, $value) {
  [class*="container-"][class*="-#{$key}#{$type}"] {
    max-width: #{$value};
  }
}
